<?php
/**
 * WeCodeArt Framework.
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package 	WeCodeArt Framework
 * @subpackage 	Support\Modules\ContactForm7
 * @copyright   Copyright (c) 2024, WeCodeArt Framework
 * @since 		6.4.5
 * @version		6.4.5
 */

namespace WeCodeArt\Support\Modules;

defined( 'ABSPATH' ) || exit;

use WeCodeArt\{ Singleton, Integration };
use WeCodeArt\Config\Traits\Asset;
use function WeCodeArt\Functions\{ get_prop, toJSON };

/**
 * The CF7 object.
 */
final class ContactForm implements Integration {

    use Asset;
    use Singleton;

    /**
	 * The config of the plugin.
	 *
	 * @access   protected
	 * @var      mixed    $config    The config of the plugin.
	 */
	protected $config;

	/**
	 * Send to Constructor
	 */
	public function init() {
		$this->config = wp_parse_args( wecodeart_option( 'contact_form_7' ), self::get_defaults() );
	}

    /**
     * Get Conditionals
     *
     * @return array
     */
	public static function get_conditionals() {
		wecodeart( 'ifso' )->register( [
			'cf7_is_active'	=> ContactForm\Condition::class,
			'cf7_has_form'	=> ContactForm\Condition\Form::class,
		] );

        return [ 'cf7_is_active' ];
    }

	/**
	 * Hooks
	 */
	public function register_hooks(): void {
		// Modules
		ContactForm\Fields::get_instance();

		// Hooks
		\add_action( 'admin_enqueue_scripts',	[ $this, 'admin_assets' 	], 20, 1 );
		\add_action( 'admin_init',				[ $this, 'insert_defaults'	], 20, 1 );
		\add_action( 'wp_enqueue_scripts',		[ $this, 'frontend_assets'	], 10, 1 );
		\add_action( 'wp_enqueue_scripts',		[ $this, 'cleanup_assets'	], 20, 1 );
		\add_action( 'wpcf7_mail_sent',			[ $this, 'mail_sent'		], 20, 1 );
		\add_filter( 'wpcf7_form_class_attr',	[ $this, 'form_class'		], 20, 1 );
		\add_filter( 'body_class',				[ $this, 'body_class'		], 20, 1 );

		if( get_prop( $this->config, [ 'remove_autop' ] ) ) {
			\add_filter( 'wpcf7_autop_or_not', '__return_false', PHP_INT_MAX );
		}

		if( get_prop( $this->config, [ 'feedback' ], '' ) === 'toast' ) {
			\add_filter( 'wpcf7_form_response_output', '__return_empty_string', PHP_INT_MAX );
		}
	}

	/**
	 * Assets
	 *
	 * @since 	1.0.0
	 * @version	1.0.0
	 *
	 * @return 	void
	 */
	public function frontend_assets(): void {
		// If no form don't bother loading our plugin assets.
		if( ! wecodeart_if( 'cf7_has_form' ) ) {
			return;
		}

		\wecodeart( 'styles' )->Utilities->load( [ 'position-relative', 'd-block' ] );
		
		$feedback = strtolower( get_prop( $this->config, [ 'feedback' ], '' ) );

		switch( $feedback ):
			case 'modal': 
				$positions = explode( ' ', get_prop( $this->config, [ 'feedback_position' ], '' ) );
				\wecodeart( 'styles' )->Utilities->load( $positions );
			break;
			case 'toast': 
				\wecodeart( 'toasts' );
			break;
		endswitch;

		\wecodeart( 'assets' )->add_style( $this->make_handle(), [
			'version'	=> wecodeart( 'version' ),
			'inline'	=> <<<CSS
				.wpcf7 :is(.screen-reader-response,.wpcf7-response-output:empty) {
					display: none;
				}
				.wpcf7 .wpcf7-submit:disabled {
					opacity: .5;
				}
				.wpcf7 .submitting .wpcf7-spinner {
					display: inline-block;
					visibility: visible;
				}
				.wpcf7 .wpcf7-spinner {
					position: relative;
					visibility: hidden;
					display: none;
					vertical-align: -.35em;
					background-color: var(--wp--preset--color--dark);
					opacity: 0.75;
					width: 1.5em;
					height: 1.5em;
					padding: 0;
					border: none;
					border-radius: 100%;
					margin-left: 1rem;
				}
				.wpcf7 .wpcf7-spinner::before { 
					content: '';
					position: absolute;
					background-color: var(--wp--preset--color--light);
					top: 4px;
					left: 4px;
					width: 6px;
					height: 6px;
					border: none;
					border-radius: 100%;
					transform-origin: 8px 8px;
					animation-name: spin;
					animation-duration: 1000ms;
					animation-timing-function: linear;
					animation-iteration-count: infinite;

					@media (prefers-reduced-motion: reduce) {
						animation-name: blink;
						animation-duration: 2000ms;
					}
				}
				.wpcf7 p {
					margin-top: 0;
				}

				@keyframes spin {
					from {
						transform: rotate(0deg);
					}

					to {
						transform: rotate(360deg);
					}
				}

				@keyframes blink {
					from {
						opacity: 0;
					}

					50% {
						opacity: 1;
					}

					to {
						opacity: 0;
					}
				}
			CSS,
		] );

		\wecodeart( 'assets' )->add_script( $this->make_handle(), [
			'version'	=> wecodeart( 'version' ),
			'deps'		=> [ 'wecodeart-support-assets', 'wecodeart-support-assets-template', 'contact-form-7' ],
			'locale'	=> [
				'feedback'	=> [
					'type' 		=> $feedback,
					'position' 	=> get_prop( $this->config, [ 'feedback_position' ], '' )
				],
				'labels'	=> [
					'error'		=> __( 'Error', 'wecodeart' ),
					'success' 	=> __( 'Success', 'wecodeart' ),
				]
			],
			'inline'	=> <<<JS
				wecodeart.routes = {
					...wecodeart.routes,
					wecodeartCf7: {
						complete: () => {
							const { Selector, Events, Template, plugins: { Toast } } = wecodeart;
							const { labels = {}, feedback: { type = '', position = '' } } = wecodeartSupportModulesContactform || {};

							Selector.find('.wpcf7-form').map(el => {
								Events.on(el, 'wpcf7submit', ({ detail: { apiResponse: {
									status,
									message,
									contact_form_id,
									redirect = false
								} } }) => {
									if (redirect) {
										const { url, blank, delay } = redirect;

										setTimeout((() => {
											if (blank) {
												window.open(url, '_blank');
												return;
											}
											window.location = url;
										}), parseInt(delay));

										return;
									}

									if (type === '') {
										return;
									}

									const isSent = status === 'mail_sent';

									switch(type) {
										case 'toast':
											const template = new Template({
												content: {
													'.wp-toast__header-text': isSent ? labels.success : labels.error,
											 		'.wp-toast__body': message,
												},
												extraClass: isSent ? 'has-success-background-color' : 'has-warning-background-color',
												template: Selector.findOne('#wp-toast-template').innerHTML
											}).toHtml();
											
											Selector.findOne('.wp-site-toasts')?.appendChild(template);

										 	return new Toast(template, { autoRemove: true }).show();
										break;
										case 'modal':
											console.warn('CF7 Module does not have support for modal yet.');
										break;
									}
								});

								Events.on(el, 'wpcf7mailsent', () => el.classList.remove('was-validated'));
								Events.on(el, 'wpcf7mailfailed', () => el.classList.remove('was-validated'));
							});
						}
					}
				};
			JS,
		] );
	}

	/**
	 * Admin Assets
	 *
	 * @since 	1.0.0
	 * @version	1.0.0
	 */
	public function admin_assets(): void {
		if( ! wecodeart_if( 'is_theme_admin' ) || ! current_user_can( 'activate_plugins' ) ) {
			return;
		}

		wp_register_script( 
			$this->make_handle(),
			$this->get_asset( 'js', 'admin' ),
			[ 'wecodeart-admin' ],
			wecodeart( 'version' ),
			true 
		);

		wp_enqueue_script( $this->make_handle() );

		wp_set_script_translations( $this->make_handle(), 'wecodeart', wecodeart_config( 'directories' )['languages'] );
	}

	/**
	 * Assets Cleanup
	 *
	 * @since 	1.0.0
	 * @version	1.0.0
	 *
	 * @return 	void
	 */
	public function cleanup_assets(): void {
		// If no form and control assets dont bother loading CF7 assets.
		if( ! wecodeart_if( 'cf7_has_form' ) && get_prop( $this->config, 'clean_assets' ) ) {
			// Plugin cleanup
			wp_deregister_style( 'contact-form-7' );
			wp_deregister_script( 'contact-form-7' );
			// Recaptcha cleanup
			wp_deregister_script( 'google-recaptcha' );
			wp_deregister_script( 'wpcf7-recaptcha' );
		}

		if( get_prop( $this->config, 'remove_css' ) ) {
			wp_deregister_style( 'contact-form-7' );
		}

		if( get_prop( $this->config, 'remove_js' ) ) {
			wp_deregister_script( 'contact-form-7' );
		}
	}

	/**
	 * Redirection
	 *
	 * @since 	1.0.0
	 * @version	1.0.0
	 *
	 * @param	object	$form
	 *
	 * @return 	void
	 */
	public function mail_sent( $form ): void {
		$has_redirect 	= $form->pref( 'redirect_to' );
		
		if( ! $has_redirect ) {
			return;
		}

		add_filter( 'wpcf7_submission_result', static function( $result ) use ( $form, $has_redirect ) {
			$redirect 	= is_numeric( $has_redirect ) ? get_permalink( $has_redirect ) : $has_redirect;

			return wp_parse_args( [
				'redirect' => [
					'url' 	=> esc_url( $redirect ),
					'delay'	=> (int) $form->pref( 'redirect_delay' ),
					'blank'	=> (bool) $form->is_true( 'redirect_blank' )
				],
			], $result );
		} );
	}

	/**
	 * Adds custom classes to the array of body classes.
	 *
	 * @since	1.0.0
	 * @version 1.0.0
	 *
	 * @param 	array 	$classes Classes for the body element.
	 *
	 * @return 	array
	 */
	public function body_class( array $classes ): array {
		if( wecodeart_if( 'cf7_has_form' ) ) {
			$classes[] = 'wecodeart-cf7';
		}

		return $classes;
	}
	
	/**
	 * Filter CF7 Form class
	 *
	 * @since   1.0.0
	 * @version 1.0.0
	 *
	 * @param	string	$class
	 *
	 * @return  string	$class
	 */
	public function form_class( string $class ): string {
		$classes = explode( ' ', $class );
		$classes[] = 'needs-validation';

		if( isset( $classes['invalid'] ) ) {
			$classes[] = 'was-validated';
		}

		return join( ' ', $classes );
	}

	/**
	 * Insert defaults.
	 *
	 * @return 	void
	 */
	public function insert_defaults(): void {
		if( ! wecodeart_option( 'contact_form_7' ) ) {
			wecodeart_option( [
				'contact_form_7' => self::get_defaults()
			] );
		}
	}

	/**
	 * Get file.
	 *
	 * @return string
	 */
	public function get_asset( string $type, string $name ): string {
		$file_path = wecodeart_if( 'is_dev_mode' ) ? 'unminified' : 'minified';
		$file_name = wecodeart_if( 'is_dev_mode' ) ? $name . '.' . $type :  $name . '.min.' . $type;
		$file_path = wecodeart_config( 'paths' )['uri'] . '/inc/support/modules/contactform/assets/' . $file_path . '/' . $type . '/' . $file_name;

		return esc_url( $file_path );
	}

    /**
	 * Get defaults.
	 *
	 * @return 	array
	 */
	public static function get_defaults(): array {
		return [
			'remove_js'		=> false,
			'remove_css'	=> true,
			'remove_autop'	=> false,
			'clean_assets'	=> true,
			'feedback'		=> '',
		];
	}
}
